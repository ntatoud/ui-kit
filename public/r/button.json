{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:component",
  "title": "Button",
  "description": "A fully customizable button component",
  "files": [
    {
      "path": "registry/ui/button/index.tsx",
      "content": "import { Slot, Slottable } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nimport { Spinner } from '@/components/ui/spinner'\n\nconst buttonVariants = cva(\n  \"relative inline-flex w-fit shrink-0 cursor-pointer items-center justify-center gap-2 overflow-hidden rounded-md text-sm font-medium whitespace-nowrap transition-[color,box-shadow] outline-none focus-visible:border-ring focus-visible:ring-[3px] focus-visible:ring-ring/50 disabled:pointer-events-none disabled:opacity-50 aria-invalid:border-destructive aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        secondary:\n          'border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground',\n        ghost: 'hover:bg-black/5 dark:hover:bg-white/10',\n        destructive:\n          'bg-destructive text-destructive-foreground shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40',\n        'destructive-secondary':\n          'border border-input bg-background text-negative-600 shadow-xs hover:border-transparent hover:bg-destructive/90 hover:text-destructive-foreground dark:text-negative-400 dark:hover:text-destructive-foreground',\n\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-9 px-4 py-2 has-[>svg]:px-3',\n        xs: \"h-7 gap-1 rounded-sm px-2 text-xs has-[>svg]:px-1.5 [&_svg:not([class*='size-'])]:size-3\",\n        sm: 'h-8 px-3 has-[>svg]:px-2.5',\n        lg: 'h-10 px-6 has-[>svg]:px-4',\n        icon: 'size-9',\n        'icon-xs':\n          \"size-7 rounded-sm text-xs [&_svg:not([class*='size-'])]:size-3\",\n        'icon-sm': 'size-8',\n        'icon-lg': 'size-10',\n      },\n    },\n    compoundVariants: [\n      {\n        variant: ['link'],\n        size: ['xs', 'sm', 'default', 'lg'],\n        class: 'px-0 has-[>svg]:px-0',\n      },\n    ],\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n)\n\ntype ButtonProps = React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> &\n  (\n    | {\n        asChild?: false\n        loading?: boolean\n      }\n    | { asChild: true }\n  )\n\nfunction Button(_props: ButtonProps) {\n  const { className, variant, asChild, loading, size, disabled, ...props } =\n    !_props.asChild ? _props : { ..._props, loading: false }\n  const Comp = asChild ? Slot : 'button'\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      disabled={loading || disabled}\n      {...props}\n    >\n      {loading ? (\n        <>\n          <span className=\"absolute inset-0 flex items-center justify-center\">\n            <Spinner />\n          </span>\n          <span className=\"flex items-center justify-center gap-2 opacity-0\">\n            {props.children}\n          </span>\n        </>\n      ) : (\n        <Slottable>{props.children}</Slottable>\n      )}\n    </Comp>\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/ui/button/docs.stories.tsx",
      "content": "import type { Meta } from '@storybook/react'\nimport { fn } from '@storybook/test'\n\nimport { Button } from '.'\n\n// More on how to set up stories at: https://storybook.js.org/docs/writing-stories#default-export\nconst meta = {\n  title: 'Components/Button',\n  component: Button,\n  parameters: {\n    // Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/configure/story-layout\n    layout: 'centered',\n  },\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\n  tags: ['autodocs'],\n  // More on argTypes: https://storybook.js.org/docs/api/argtypes\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\n  args: { onClick: fn() },\n} satisfies Meta<typeof Button>\n\nexport default meta\n\n// More on writing stories with args: https://storybook.js.org/docs/writing-stories/args\nexport const Default = () => <Button>Default</Button>\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/ui/button/button.test.tsx",
      "content": "import { describe, expect, it, vi } from 'vitest'\nimport { render, screen } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { Button } from '.'\n\ndescribe('Button', () => {\n  it('renders button with children', () => {\n    render(<Button>Click me</Button>)\n    expect(screen.getByRole('button')).toHaveTextContent('Click me')\n  })\n\n  it('applies default variant styles', () => {\n    render(<Button>Default Button</Button>)\n    expect(screen.getByRole('button')).toHaveClass('bg-primary')\n  })\n\n  it('applies custom variant styles', () => {\n    render(<Button variant=\"destructive\">Destructive Button</Button>)\n    expect(screen.getByRole('button')).toHaveClass('bg-destructive')\n  })\n\n  it('applies size styles', () => {\n    render(<Button size=\"sm\">Small Button</Button>)\n    expect(screen.getByRole('button')).toHaveClass('h-8')\n  })\n\n  it('renders as child component when asChild is true', () => {\n    render(\n      <Button asChild>\n        <a href=\"#\">Link Button</a>\n      </Button>\n    )\n    expect(screen.getByRole('link')).toBeInTheDocument()\n  })\n\n  it('handles click events', async () => {\n    const handleClick = vi.fn()\n    const user = userEvent.setup()\n\n    render(<Button onClick={handleClick}>Clickable</Button>)\n    await user.click(screen.getByRole('button'))\n\n    expect(handleClick).toHaveBeenCalledTimes(1)\n  })\n\n  it('is disabled when disabled prop is true', () => {\n    render(<Button disabled>Disabled Button</Button>)\n    expect(screen.getByRole('button')).toBeDisabled()\n  })\n})\n",
      "type": "registry:ui"
    }
  ]
}